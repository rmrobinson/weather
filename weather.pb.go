// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        v5.28.3
// source: weather.proto

package weather

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type WeatherIcon int32

const (
	WeatherIcon_SUNNY            WeatherIcon = 0
	WeatherIcon_CLOUDY           WeatherIcon = 1
	WeatherIcon_PARTIALLY_CLOUDY WeatherIcon = 2
	WeatherIcon_MOSTLY_CLOUDY    WeatherIcon = 3
	WeatherIcon_RAIN             WeatherIcon = 4
	WeatherIcon_CHANCE_OF_RAIN   WeatherIcon = 5
	WeatherIcon_SNOW             WeatherIcon = 6
	WeatherIcon_CHANCE_OF_SNOW   WeatherIcon = 7
	WeatherIcon_SNOW_SHOWERS     WeatherIcon = 8
	WeatherIcon_THUNDERSTORMS    WeatherIcon = 9
	WeatherIcon_FOG              WeatherIcon = 10
)

// Enum value maps for WeatherIcon.
var (
	WeatherIcon_name = map[int32]string{
		0:  "SUNNY",
		1:  "CLOUDY",
		2:  "PARTIALLY_CLOUDY",
		3:  "MOSTLY_CLOUDY",
		4:  "RAIN",
		5:  "CHANCE_OF_RAIN",
		6:  "SNOW",
		7:  "CHANCE_OF_SNOW",
		8:  "SNOW_SHOWERS",
		9:  "THUNDERSTORMS",
		10: "FOG",
	}
	WeatherIcon_value = map[string]int32{
		"SUNNY":            0,
		"CLOUDY":           1,
		"PARTIALLY_CLOUDY": 2,
		"MOSTLY_CLOUDY":    3,
		"RAIN":             4,
		"CHANCE_OF_RAIN":   5,
		"SNOW":             6,
		"CHANCE_OF_SNOW":   7,
		"SNOW_SHOWERS":     8,
		"THUNDERSTORMS":    9,
		"FOG":              10,
	}
)

func (x WeatherIcon) Enum() *WeatherIcon {
	p := new(WeatherIcon)
	*p = x
	return p
}

func (x WeatherIcon) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WeatherIcon) Descriptor() protoreflect.EnumDescriptor {
	return file_weather_proto_enumTypes[0].Descriptor()
}

func (WeatherIcon) Type() protoreflect.EnumType {
	return &file_weather_proto_enumTypes[0]
}

func (x WeatherIcon) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WeatherIcon.Descriptor instead.
func (WeatherIcon) EnumDescriptor() ([]byte, []int) {
	return file_weather_proto_rawDescGZIP(), []int{0}
}

type WeatherCondition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SummaryIcon WeatherIcon `protobuf:"varint,20,opt,name=summary_icon,json=summaryIcon,proto3,enum=faltung.nerves.weather.WeatherIcon" json:"summary_icon,omitempty"`
	// In Celsius.
	Temperature float32 `protobuf:"fixed32,21,opt,name=temperature,proto3" json:"temperature,omitempty"`
	// In Celsius. May not be set if there are no wind conditions.
	WindChill float32 `protobuf:"fixed32,22,opt,name=wind_chill,json=windChill,proto3" json:"wind_chill,omitempty"`
	// In Celsius.
	DewPoint float32 `protobuf:"fixed32,23,opt,name=dew_point,json=dewPoint,proto3" json:"dew_point,omitempty"`
	// A % out of 100
	Humidity int32 `protobuf:"varint,24,opt,name=humidity,proto3" json:"humidity,omitempty"`
	// In kilopascals (kPa)
	Pressure float32 `protobuf:"fixed32,25,opt,name=pressure,proto3" json:"pressure,omitempty"`
	// In km/hr
	WindSpeed int32 `protobuf:"varint,26,opt,name=wind_speed,json=windSpeed,proto3" json:"wind_speed,omitempty"`
	// In km
	Visibility int32  `protobuf:"varint,27,opt,name=visibility,proto3" json:"visibility,omitempty"`
	UvIndex    int32  `protobuf:"varint,28,opt,name=uv_index,json=uvIndex,proto3" json:"uv_index,omitempty"`
	Summary    string `protobuf:"bytes,29,opt,name=summary,proto3" json:"summary,omitempty"`
}

func (x *WeatherCondition) Reset() {
	*x = WeatherCondition{}
	mi := &file_weather_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WeatherCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WeatherCondition) ProtoMessage() {}

func (x *WeatherCondition) ProtoReflect() protoreflect.Message {
	mi := &file_weather_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WeatherCondition.ProtoReflect.Descriptor instead.
func (*WeatherCondition) Descriptor() ([]byte, []int) {
	return file_weather_proto_rawDescGZIP(), []int{0}
}

func (x *WeatherCondition) GetSummaryIcon() WeatherIcon {
	if x != nil {
		return x.SummaryIcon
	}
	return WeatherIcon_SUNNY
}

func (x *WeatherCondition) GetTemperature() float32 {
	if x != nil {
		return x.Temperature
	}
	return 0
}

func (x *WeatherCondition) GetWindChill() float32 {
	if x != nil {
		return x.WindChill
	}
	return 0
}

func (x *WeatherCondition) GetDewPoint() float32 {
	if x != nil {
		return x.DewPoint
	}
	return 0
}

func (x *WeatherCondition) GetHumidity() int32 {
	if x != nil {
		return x.Humidity
	}
	return 0
}

func (x *WeatherCondition) GetPressure() float32 {
	if x != nil {
		return x.Pressure
	}
	return 0
}

func (x *WeatherCondition) GetWindSpeed() int32 {
	if x != nil {
		return x.WindSpeed
	}
	return 0
}

func (x *WeatherCondition) GetVisibility() int32 {
	if x != nil {
		return x.Visibility
	}
	return 0
}

func (x *WeatherCondition) GetUvIndex() int32 {
	if x != nil {
		return x.UvIndex
	}
	return 0
}

func (x *WeatherCondition) GetSummary() string {
	if x != nil {
		return x.Summary
	}
	return ""
}

type WeatherReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ObservedAt    *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=observed_at,json=observedAt,proto3" json:"observed_at,omitempty"`
	ObservationId string                 `protobuf:"bytes,2,opt,name=observation_id,json=observationId,proto3" json:"observation_id,omitempty"`
	CreatedAt     *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt     *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	Conditions    *WeatherCondition      `protobuf:"bytes,20,opt,name=conditions,proto3" json:"conditions,omitempty"`
}

func (x *WeatherReport) Reset() {
	*x = WeatherReport{}
	mi := &file_weather_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WeatherReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WeatherReport) ProtoMessage() {}

func (x *WeatherReport) ProtoReflect() protoreflect.Message {
	mi := &file_weather_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WeatherReport.ProtoReflect.Descriptor instead.
func (*WeatherReport) Descriptor() ([]byte, []int) {
	return file_weather_proto_rawDescGZIP(), []int{1}
}

func (x *WeatherReport) GetObservedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ObservedAt
	}
	return nil
}

func (x *WeatherReport) GetObservationId() string {
	if x != nil {
		return x.ObservationId
	}
	return ""
}

func (x *WeatherReport) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *WeatherReport) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *WeatherReport) GetConditions() *WeatherCondition {
	if x != nil {
		return x.Conditions
	}
	return nil
}

type WeatherForecast struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ForecastedFor *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=forecasted_for,json=forecastedFor,proto3" json:"forecasted_for,omitempty"`
	ForecastId    string                 `protobuf:"bytes,2,opt,name=forecast_id,json=forecastId,proto3" json:"forecast_id,omitempty"`
	CreatedAt     *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt     *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	Conditions    *WeatherCondition      `protobuf:"bytes,20,opt,name=conditions,proto3" json:"conditions,omitempty"`
}

func (x *WeatherForecast) Reset() {
	*x = WeatherForecast{}
	mi := &file_weather_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WeatherForecast) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WeatherForecast) ProtoMessage() {}

func (x *WeatherForecast) ProtoReflect() protoreflect.Message {
	mi := &file_weather_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WeatherForecast.ProtoReflect.Descriptor instead.
func (*WeatherForecast) Descriptor() ([]byte, []int) {
	return file_weather_proto_rawDescGZIP(), []int{2}
}

func (x *WeatherForecast) GetForecastedFor() *timestamppb.Timestamp {
	if x != nil {
		return x.ForecastedFor
	}
	return nil
}

func (x *WeatherForecast) GetForecastId() string {
	if x != nil {
		return x.ForecastId
	}
	return ""
}

func (x *WeatherForecast) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *WeatherForecast) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *WeatherForecast) GetConditions() *WeatherCondition {
	if x != nil {
		return x.Conditions
	}
	return nil
}

type GetCurrentReportRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Latitude  float64 `protobuf:"fixed64,1,opt,name=latitude,proto3" json:"latitude,omitempty"`
	Longitude float64 `protobuf:"fixed64,2,opt,name=longitude,proto3" json:"longitude,omitempty"`
}

func (x *GetCurrentReportRequest) Reset() {
	*x = GetCurrentReportRequest{}
	mi := &file_weather_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCurrentReportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCurrentReportRequest) ProtoMessage() {}

func (x *GetCurrentReportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_weather_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCurrentReportRequest.ProtoReflect.Descriptor instead.
func (*GetCurrentReportRequest) Descriptor() ([]byte, []int) {
	return file_weather_proto_rawDescGZIP(), []int{3}
}

func (x *GetCurrentReportRequest) GetLatitude() float64 {
	if x != nil {
		return x.Latitude
	}
	return 0
}

func (x *GetCurrentReportRequest) GetLongitude() float64 {
	if x != nil {
		return x.Longitude
	}
	return 0
}

type GetCurrentReportResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Report      *WeatherReport `protobuf:"bytes,1,opt,name=report,proto3" json:"report,omitempty"`
	StationName string         `protobuf:"bytes,2,opt,name=station_name,json=stationName,proto3" json:"station_name,omitempty"`
}

func (x *GetCurrentReportResponse) Reset() {
	*x = GetCurrentReportResponse{}
	mi := &file_weather_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCurrentReportResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCurrentReportResponse) ProtoMessage() {}

func (x *GetCurrentReportResponse) ProtoReflect() protoreflect.Message {
	mi := &file_weather_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCurrentReportResponse.ProtoReflect.Descriptor instead.
func (*GetCurrentReportResponse) Descriptor() ([]byte, []int) {
	return file_weather_proto_rawDescGZIP(), []int{4}
}

func (x *GetCurrentReportResponse) GetReport() *WeatherReport {
	if x != nil {
		return x.Report
	}
	return nil
}

func (x *GetCurrentReportResponse) GetStationName() string {
	if x != nil {
		return x.StationName
	}
	return ""
}

type GetForecastRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Latitude  float64 `protobuf:"fixed64,1,opt,name=latitude,proto3" json:"latitude,omitempty"`
	Longitude float64 `protobuf:"fixed64,2,opt,name=longitude,proto3" json:"longitude,omitempty"`
}

func (x *GetForecastRequest) Reset() {
	*x = GetForecastRequest{}
	mi := &file_weather_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetForecastRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetForecastRequest) ProtoMessage() {}

func (x *GetForecastRequest) ProtoReflect() protoreflect.Message {
	mi := &file_weather_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetForecastRequest.ProtoReflect.Descriptor instead.
func (*GetForecastRequest) Descriptor() ([]byte, []int) {
	return file_weather_proto_rawDescGZIP(), []int{5}
}

func (x *GetForecastRequest) GetLatitude() float64 {
	if x != nil {
		return x.Latitude
	}
	return 0
}

func (x *GetForecastRequest) GetLongitude() float64 {
	if x != nil {
		return x.Longitude
	}
	return 0
}

type GetForecastResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ForecastRecords []*WeatherForecast `protobuf:"bytes,1,rep,name=forecast_records,json=forecastRecords,proto3" json:"forecast_records,omitempty"`
}

func (x *GetForecastResponse) Reset() {
	*x = GetForecastResponse{}
	mi := &file_weather_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetForecastResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetForecastResponse) ProtoMessage() {}

func (x *GetForecastResponse) ProtoReflect() protoreflect.Message {
	mi := &file_weather_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetForecastResponse.ProtoReflect.Descriptor instead.
func (*GetForecastResponse) Descriptor() ([]byte, []int) {
	return file_weather_proto_rawDescGZIP(), []int{6}
}

func (x *GetForecastResponse) GetForecastRecords() []*WeatherForecast {
	if x != nil {
		return x.ForecastRecords
	}
	return nil
}

var File_weather_proto protoreflect.FileDescriptor

var file_weather_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x77, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x16, 0x66, 0x61, 0x6c, 0x74, 0x75, 0x6e, 0x67, 0x2e, 0x6e, 0x65, 0x72, 0x76, 0x65, 0x73, 0x2e,
	0x77, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xe4, 0x02, 0x0a, 0x10, 0x57, 0x65, 0x61,
	0x74, 0x68, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x46, 0x0a,
	0x0c, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x66, 0x61, 0x6c, 0x74, 0x75, 0x6e, 0x67, 0x2e, 0x6e, 0x65,
	0x72, 0x76, 0x65, 0x73, 0x2e, 0x77, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x2e, 0x57, 0x65, 0x61,
	0x74, 0x68, 0x65, 0x72, 0x49, 0x63, 0x6f, 0x6e, 0x52, 0x0b, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72,
	0x79, 0x49, 0x63, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x74, 0x65, 0x6d, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x77, 0x69, 0x6e, 0x64, 0x5f,
	0x63, 0x68, 0x69, 0x6c, 0x6c, 0x18, 0x16, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x77, 0x69, 0x6e,
	0x64, 0x43, 0x68, 0x69, 0x6c, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x77, 0x5f, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x18, 0x17, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x64, 0x65, 0x77, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x75, 0x6d, 0x69, 0x64, 0x69, 0x74, 0x79, 0x18,
	0x18, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x68, 0x75, 0x6d, 0x69, 0x64, 0x69, 0x74, 0x79, 0x12,
	0x1a, 0x0a, 0x08, 0x70, 0x72, 0x65, 0x73, 0x73, 0x75, 0x72, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x08, 0x70, 0x72, 0x65, 0x73, 0x73, 0x75, 0x72, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x77,
	0x69, 0x6e, 0x64, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x77, 0x69, 0x6e, 0x64, 0x53, 0x70, 0x65, 0x65, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x76, 0x69,
	0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a,
	0x76, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x75, 0x76,
	0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x75, 0x76,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79,
	0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x22,
	0xb3, 0x02, 0x0a, 0x0d, 0x57, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x12, 0x3b, 0x0a, 0x0b, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x0a, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x41, 0x74, 0x12, 0x25,
	0x0a, 0x0e, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x48, 0x0a, 0x0a, 0x63,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x66, 0x61, 0x6c, 0x74, 0x75, 0x6e, 0x67, 0x2e, 0x6e, 0x65, 0x72, 0x76, 0x65, 0x73,
	0x2e, 0x77, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x2e, 0x57, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72,
	0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xb5, 0x02, 0x0a, 0x0f, 0x57, 0x65, 0x61, 0x74, 0x68, 0x65,
	0x72, 0x46, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x12, 0x41, 0x0a, 0x0e, 0x66, 0x6f, 0x72,
	0x65, 0x63, 0x61, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x66, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x66,
	0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x65, 0x64, 0x46, 0x6f, 0x72, 0x12, 0x1f, 0x0a, 0x0b,
	0x66, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x66, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x49, 0x64, 0x12, 0x39, 0x0a,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x48, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x66, 0x61, 0x6c, 0x74, 0x75, 0x6e,
	0x67, 0x2e, 0x6e, 0x65, 0x72, 0x76, 0x65, 0x73, 0x2e, 0x77, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72,
	0x2e, 0x57, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x53, 0x0a,
	0x17, 0x47, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x74, 0x69,
	0x74, 0x75, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6c, 0x61, 0x74, 0x69,
	0x74, 0x75, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75,
	0x64, 0x65, 0x22, 0x7c, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d,
	0x0a, 0x06, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25,
	0x2e, 0x66, 0x61, 0x6c, 0x74, 0x75, 0x6e, 0x67, 0x2e, 0x6e, 0x65, 0x72, 0x76, 0x65, 0x73, 0x2e,
	0x77, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x2e, 0x57, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x06, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x21, 0x0a,
	0x0c, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65,
	0x22, 0x4e, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x46, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75,
	0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65,
	0x22, 0x69, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x46, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x52, 0x0a, 0x10, 0x66, 0x6f, 0x72, 0x65, 0x63,
	0x61, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x66, 0x61, 0x6c, 0x74, 0x75, 0x6e, 0x67, 0x2e, 0x6e, 0x65, 0x72, 0x76,
	0x65, 0x73, 0x2e, 0x77, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x2e, 0x57, 0x65, 0x61, 0x74, 0x68,
	0x65, 0x72, 0x46, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74, 0x52, 0x0f, 0x66, 0x6f, 0x72, 0x65,
	0x63, 0x61, 0x73, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x2a, 0xb7, 0x01, 0x0a, 0x0b,
	0x57, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x49, 0x63, 0x6f, 0x6e, 0x12, 0x09, 0x0a, 0x05, 0x53,
	0x55, 0x4e, 0x4e, 0x59, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x4c, 0x4f, 0x55, 0x44, 0x59,
	0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x50, 0x41, 0x52, 0x54, 0x49, 0x41, 0x4c, 0x4c, 0x59, 0x5f,
	0x43, 0x4c, 0x4f, 0x55, 0x44, 0x59, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x4d, 0x4f, 0x53, 0x54,
	0x4c, 0x59, 0x5f, 0x43, 0x4c, 0x4f, 0x55, 0x44, 0x59, 0x10, 0x03, 0x12, 0x08, 0x0a, 0x04, 0x52,
	0x41, 0x49, 0x4e, 0x10, 0x04, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x48, 0x41, 0x4e, 0x43, 0x45, 0x5f,
	0x4f, 0x46, 0x5f, 0x52, 0x41, 0x49, 0x4e, 0x10, 0x05, 0x12, 0x08, 0x0a, 0x04, 0x53, 0x4e, 0x4f,
	0x57, 0x10, 0x06, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x48, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x4f, 0x46,
	0x5f, 0x53, 0x4e, 0x4f, 0x57, 0x10, 0x07, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x4e, 0x4f, 0x57, 0x5f,
	0x53, 0x48, 0x4f, 0x57, 0x45, 0x52, 0x53, 0x10, 0x08, 0x12, 0x11, 0x0a, 0x0d, 0x54, 0x48, 0x55,
	0x4e, 0x44, 0x45, 0x52, 0x53, 0x54, 0x4f, 0x52, 0x4d, 0x53, 0x10, 0x09, 0x12, 0x07, 0x0a, 0x03,
	0x46, 0x4f, 0x47, 0x10, 0x0a, 0x32, 0xf3, 0x01, 0x0a, 0x0e, 0x57, 0x65, 0x61, 0x74, 0x68, 0x65,
	0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x77, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x2f, 0x2e, 0x66,
	0x61, 0x6c, 0x74, 0x75, 0x6e, 0x67, 0x2e, 0x6e, 0x65, 0x72, 0x76, 0x65, 0x73, 0x2e, 0x77, 0x65,
	0x61, 0x74, 0x68, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e,
	0x66, 0x61, 0x6c, 0x74, 0x75, 0x6e, 0x67, 0x2e, 0x6e, 0x65, 0x72, 0x76, 0x65, 0x73, 0x2e, 0x77,
	0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x68, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x46, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73, 0x74,
	0x12, 0x2a, 0x2e, 0x66, 0x61, 0x6c, 0x74, 0x75, 0x6e, 0x67, 0x2e, 0x6e, 0x65, 0x72, 0x76, 0x65,
	0x73, 0x2e, 0x77, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x6f, 0x72,
	0x65, 0x63, 0x61, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x66,
	0x61, 0x6c, 0x74, 0x75, 0x6e, 0x67, 0x2e, 0x6e, 0x65, 0x72, 0x76, 0x65, 0x73, 0x2e, 0x77, 0x65,
	0x61, 0x74, 0x68, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x6f, 0x72, 0x65, 0x63, 0x61, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x1f, 0x5a, 0x1d, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x72, 0x6d, 0x72, 0x6f, 0x62, 0x69,
	0x6e, 0x73, 0x6f, 0x6e, 0x2f, 0x77, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_weather_proto_rawDescOnce sync.Once
	file_weather_proto_rawDescData = file_weather_proto_rawDesc
)

func file_weather_proto_rawDescGZIP() []byte {
	file_weather_proto_rawDescOnce.Do(func() {
		file_weather_proto_rawDescData = protoimpl.X.CompressGZIP(file_weather_proto_rawDescData)
	})
	return file_weather_proto_rawDescData
}

var file_weather_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_weather_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_weather_proto_goTypes = []any{
	(WeatherIcon)(0),                 // 0: faltung.nerves.weather.WeatherIcon
	(*WeatherCondition)(nil),         // 1: faltung.nerves.weather.WeatherCondition
	(*WeatherReport)(nil),            // 2: faltung.nerves.weather.WeatherReport
	(*WeatherForecast)(nil),          // 3: faltung.nerves.weather.WeatherForecast
	(*GetCurrentReportRequest)(nil),  // 4: faltung.nerves.weather.GetCurrentReportRequest
	(*GetCurrentReportResponse)(nil), // 5: faltung.nerves.weather.GetCurrentReportResponse
	(*GetForecastRequest)(nil),       // 6: faltung.nerves.weather.GetForecastRequest
	(*GetForecastResponse)(nil),      // 7: faltung.nerves.weather.GetForecastResponse
	(*timestamppb.Timestamp)(nil),    // 8: google.protobuf.Timestamp
}
var file_weather_proto_depIdxs = []int32{
	0,  // 0: faltung.nerves.weather.WeatherCondition.summary_icon:type_name -> faltung.nerves.weather.WeatherIcon
	8,  // 1: faltung.nerves.weather.WeatherReport.observed_at:type_name -> google.protobuf.Timestamp
	8,  // 2: faltung.nerves.weather.WeatherReport.created_at:type_name -> google.protobuf.Timestamp
	8,  // 3: faltung.nerves.weather.WeatherReport.updated_at:type_name -> google.protobuf.Timestamp
	1,  // 4: faltung.nerves.weather.WeatherReport.conditions:type_name -> faltung.nerves.weather.WeatherCondition
	8,  // 5: faltung.nerves.weather.WeatherForecast.forecasted_for:type_name -> google.protobuf.Timestamp
	8,  // 6: faltung.nerves.weather.WeatherForecast.created_at:type_name -> google.protobuf.Timestamp
	8,  // 7: faltung.nerves.weather.WeatherForecast.updated_at:type_name -> google.protobuf.Timestamp
	1,  // 8: faltung.nerves.weather.WeatherForecast.conditions:type_name -> faltung.nerves.weather.WeatherCondition
	2,  // 9: faltung.nerves.weather.GetCurrentReportResponse.report:type_name -> faltung.nerves.weather.WeatherReport
	3,  // 10: faltung.nerves.weather.GetForecastResponse.forecast_records:type_name -> faltung.nerves.weather.WeatherForecast
	4,  // 11: faltung.nerves.weather.WeatherService.GetCurrentReport:input_type -> faltung.nerves.weather.GetCurrentReportRequest
	6,  // 12: faltung.nerves.weather.WeatherService.GetForecast:input_type -> faltung.nerves.weather.GetForecastRequest
	5,  // 13: faltung.nerves.weather.WeatherService.GetCurrentReport:output_type -> faltung.nerves.weather.GetCurrentReportResponse
	7,  // 14: faltung.nerves.weather.WeatherService.GetForecast:output_type -> faltung.nerves.weather.GetForecastResponse
	13, // [13:15] is the sub-list for method output_type
	11, // [11:13] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_weather_proto_init() }
func file_weather_proto_init() {
	if File_weather_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_weather_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_weather_proto_goTypes,
		DependencyIndexes: file_weather_proto_depIdxs,
		EnumInfos:         file_weather_proto_enumTypes,
		MessageInfos:      file_weather_proto_msgTypes,
	}.Build()
	File_weather_proto = out.File
	file_weather_proto_rawDesc = nil
	file_weather_proto_goTypes = nil
	file_weather_proto_depIdxs = nil
}
